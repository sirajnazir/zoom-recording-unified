const { logger } = require('../../shared');

class EnhancedMetadataExtractor {
    constructor({ cache, nameStandardizer }) {
        this.cache = cache;
        this.nameStandardizer = nameStandardizer;
        
        // Comprehensive topic patterns
        this.topicPatterns = [
            {
                regex: /^([A-Za-z]+)\s*<>\s*([A-Za-z]+)\s*\|\s*Wk\s*#?(\d+)\s*\|\s*(\d+)\s*Wk\s*Program/i,
                description: 'Coach <> Student | Wk #X | Y Wk Program',
                fields: { coach: 1, student: 2, week: 3, program: 4 },
                confidence: 100
            },
            {
                regex: /^([A-Za-z]+)\s*<>\s*([A-Za-z]+)\s*\|\s*Week\s*(\d+)\s*\|\s*(\d+)\s*Wk\s*Program/i,
                description: 'Coach <> Student | Week X | Y Wk Program',
                fields: { coach: 1, student: 2, week: 3, program: 4 },
                confidence: 100
            },
            {
                regex: /^([A-Za-z]+)\s*<>\s*([A-Za-z]+)\s*\|\s*Wk\s*#?(\d+)/i,
                description: 'Coach <> Student | Wk #X',
                fields: { coach: 1, student: 2, week: 3 },
                confidence: 95
            },
            {
                regex: /^([A-Za-z]+)\s*<>\s*([A-Za-z]+)\s*Game\s*Plan\s*Session\s*\|\s*Wk\s*#?(\d+)/i,
                description: 'Coach <> Student Game Plan Session | Wk #X',
                fields: { coach: 1, student: 2, week: 3, sessionType: 'Game Plan' },
                confidence: 100
            },
            {
                regex: /^([A-Za-z]+)\s*<>\s*([A-Za-z]+)/i,
                description: 'Coach <> Student',
                fields: { coach: 1, student: 2 },
                confidence: 85
            }
        ];
        
        // Coach aliases
        this.coachAliases = {
            'noor': ['noor', 'noor hassan', 'noor@ivymentors.co'],
            'rishi': ['rishi', 'rishi padmanabhan', 'rishi@ivymentors.co'],
            'aditi': ['aditi', 'aditi b', 'aditi bhaskar', 'aditi@ivymentors.co'],
            'jenny': ['jenny', 'jenny duan', 'jenny@ivymentors.co'],
            'jamie': ['jamie', 'jamie@ivymentors.co'],
            'kelvin': ['kelvin', 'kelvin@ivymentors.co'],
            'juli': ['juli', 'julie', 'julie@ivymentors.co'],
            'erin': ['erin', 'erin ye', 'erin@ivymentors.co'],
            'steven': ['steven', 'steven zhou', 'steven@ivymentors.co'],
            'marissa': ['marissa', 'marissa@ivymentors.co'],
            'andrew': ['andrew', 'andrew@ivymentors.co'],
            'janice': ['janice', 'janice teoh', 'janice@ivymentors.co']
        };
        
        // Zoom metadata fields we care about
        this.zoomFields = {
            core: ['id', 'uuid', 'topic', 'start_time', 'duration', 'host_email', 'host_name'],
            participants: ['user_id', 'user_name', 'user_email', 'join_time', 'leave_time'],
            recording: ['recording_start', 'recording_end', 'file_type', 'file_size', 'download_url']
        };
    }

    /**
     * Extract comprehensive metadata from recording
     */
    async extractMetadata(recording) {
        const extraction = {
            // Core results
            coach: null,
            student: null,
            weekNumber: null,
            programDuration: null,
            sessionType: null,
            
            // Confidence scores
            confidence: {
                coach: 0,
                student: 0,
                weekNumber: 0,
                programDuration: 0,
                sessionType: 0,
                overall: 0
            },
            
            // Evidence tracking
            evidence: [],
            dataSources: [],
            
            // Raw data
            raw: {
                hostEmail: recording.host_email,
                hostName: recording.host_name,
                topic: recording.topic,
                participants: recording.participants || [],
                duration: recording.duration,
                startTime: recording.start_time
            },
            
            // Processing metadata
            processing: {
                timestamp: new Date().toISOString(),
                methods: []
            }
        };

        try {
            // Extract from multiple sources in priority order
            await this.extractFromHost(recording, extraction);
            await this.extractFromTopic(recording, extraction);
            await this.extractFromParticipants(recording, extraction);
            await this.extractFromFolderPath(recording, extraction);
            
            // Apply name standardization
            await this.standardizeNames(extraction);
            
            // Determine session type
            this.determineSessionType(extraction);
            
            // Calculate overall confidence
            extraction.confidence.overall = this.calculateOverallConfidence(extraction.confidence);
            
            logger.info('Metadata extraction completed', {
                coach: extraction.coach,
                student: extraction.student,
                week: extraction.weekNumber,
                confidence: extraction.confidence.overall
            });

        } catch (error) {
            extraction.processing.errors = [error.message];
            logger.error('Metadata extraction error:', error);
        }

        return extraction;
    }

    /**
     * Extract from host information
     */
    async extractFromHost(recording, extraction) {
        if (!recording.host_email && !recording.host_name) return;

        const hostEmail = recording.host_email?.toLowerCase() || '';
        const hostName = recording.host_name || '';

        // Check email against coach aliases
        for (const [coachName, aliases] of Object.entries(this.coachAliases)) {
            if (aliases.some(alias => hostEmail.includes(alias))) {
                extraction.coach = coachName.charAt(0).toUpperCase() + coachName.slice(1);
                extraction.confidence.coach = 100;
                extraction.evidence.push(`Coach identified from host email: ${hostEmail}`);
                extraction.dataSources.push('host_email');
                extraction.processing.methods.push('host_email_match');
                break;
            }
        }

        // If no email match, try name
        if (!extraction.coach && hostName) {
            const standardized = await this.nameStandardizer.standardizeName(hostName);
            if (standardized.confidence > 80) {
                extraction.coach = standardized.standardized;
                extraction.confidence.coach = standardized.confidence;
                extraction.evidence.push(`Coach identified from host name: ${hostName}`);
                extraction.dataSources.push('host_name');
                extraction.processing.methods.push('host_name_standardization');
            }
        }
    }

    /**
     * Extract from meeting topic
     */
    async extractFromTopic(recording, extraction) {
        if (!recording.topic) return;

        const topic = recording.topic;
        extraction.evidence.push(`Analyzing topic: "${topic}"`);
        extraction.dataSources.push('topic');

        // Try patterns in order of confidence
        for (const pattern of this.topicPatterns) {
            const match = topic.match(pattern.regex);
            if (match) {
                await this.applyPatternMatch(match, pattern, extraction);
                extraction.processing.methods.push(`topic_pattern_${pattern.description}`);
                break;
            }
        }

        // Check for Personal Meeting Room
        const pmrResult = this.nameStandardizer.extractFromPersonalMeetingRoom(topic);
        if (pmrResult && pmrResult.coach) {
            if (!extraction.coach || extraction.confidence.coach < pmrResult.confidence) {
                extraction.coach = pmrResult.coach;
                extraction.confidence.coach = pmrResult.confidence;
                extraction.evidence.push('Coach identified from Personal Meeting Room');
                extraction.processing.methods.push('personal_meeting_room');
            }
            
            if (pmrResult.student && pmrResult.student !== 'Unknown') {
                extraction.student = pmrResult.student;
                extraction.confidence.student = pmrResult.confidence - 10; // Slightly lower confidence
                extraction.evidence.push('Student inferred from Personal Meeting Room pattern');
            }
        }
    }

    /**
     * Extract from participants
     */
    async extractFromParticipants(recording, extraction) {
        if (!recording.participants || recording.participants.length === 0) return;

        extraction.evidence.push(`Analyzing ${recording.participants.length} participants`);
        extraction.dataSources.push('participants');

        const participants = recording.participants;
        const nonCoachParticipants = [];

        for (const participant of participants) {
            const name = participant.user_name || participant.name || '';
            const email = participant.user_email || participant.email || '';

            // Skip if this is an ivymentors email (staff, not students)
            if (email && email.toLowerCase().includes('@ivymentors.co')) {
                continue;
            }

            // Check if participant is a coach
            let isCoach = false;
            for (const [coachName, aliases] of Object.entries(this.coachAliases)) {
                if (aliases.some(alias => 
                    email.toLowerCase().includes(alias) || 
                    name.toLowerCase().includes(alias)
                )) {
                    isCoach = true;
                    if (!extraction.coach || extraction.confidence.coach < 90) {
                        extraction.coach = coachName.charAt(0).toUpperCase() + coachName.slice(1);
                        extraction.confidence.coach = 90;
                        extraction.evidence.push(`Coach identified from participant: ${name}`);
                        extraction.processing.methods.push('participant_coach');
                    }
                    break;
                }
            }

            if (!isCoach && name) {
                nonCoachParticipants.push({ name, email });
            }
        }

        // First non-coach participant is likely the student
        if (nonCoachParticipants.length > 0 && !extraction.student) {
            const studentParticipant = nonCoachParticipants[0];
            const standardized = await this.nameStandardizer.standardizeName(studentParticipant.name);
            
            if (standardized.standardized && standardized.standardized !== 'Unknown') {
                extraction.student = standardized.standardized;
                extraction.confidence.student = Math.min(85, standardized.confidence);
                extraction.evidence.push(`Student identified from participant: ${studentParticipant.name}`);
                extraction.processing.methods.push('participant_student');
                
                // Check if this was a family name resolution
                if (standardized.method === 'family_name_resolution') {
                    extraction.evidence.push(`Family name resolved: ${studentParticipant.name} → ${standardized.standardized}`);
                }
            }
        }
    }

    /**
     * Extract from folder path or file name
     */
    async extractFromFolderPath(recording, extraction) {
        const path = recording.folder_path || recording.file_path || recording.folder_name || '';
        if (!path) return;

        extraction.evidence.push(`Analyzing path: "${path}"`);
        extraction.dataSources.push('folder_path');

        // Path patterns
        const pathPatterns = [
            {
                regex: /([A-Za-z]+)_([A-Za-z]+)_Wk(\d+)/,
                description: 'Coach_Student_WkX',
                fields: { coach: 1, student: 2, week: 3 },
                confidence: 80
            },
            {
                regex: /(\w+)_(\w+)_Week(\d+)/,
                description: 'Coach_Student_WeekX',
                fields: { coach: 1, student: 2, week: 3 },
                confidence: 80
            }
        ];

        for (const pattern of pathPatterns) {
            const match = path.match(pattern.regex);
            if (match) {
                await this.applyPatternMatch(match, pattern, extraction);
                extraction.processing.methods.push(`path_pattern_${pattern.description}`);
                break;
            }
        }
    }

    /**
     * Apply pattern match results
     */
    async applyPatternMatch(match, pattern, extraction) {
        const fields = pattern.fields;

        if (fields.coach && match[fields.coach]) {
            const coachName = match[fields.coach];
            const standardized = await this.nameStandardizer.standardizeName(coachName, 'coach');
            
            if (!extraction.coach || extraction.confidence.coach < pattern.confidence) {
                extraction.coach = standardized.standardized;
                extraction.confidence.coach = Math.min(pattern.confidence, standardized.confidence);
                extraction.evidence.push(`Coach "${extraction.coach}" from pattern: ${pattern.description}`);
            }
        }

        if (fields.student && match[fields.student]) {
            const studentName = match[fields.student];
            const standardized = await this.nameStandardizer.standardizeName(studentName, 'student');
            
            if (!extraction.student || extraction.confidence.student < pattern.confidence) {
                extraction.student = standardized.standardized;
                extraction.confidence.student = Math.min(pattern.confidence, standardized.confidence);
                extraction.evidence.push(`Student "${extraction.student}" from pattern: ${pattern.description}`);
            }
        }

        if (fields.week && match[fields.week]) {
            const week = parseInt(match[fields.week]);
            if (week > 0 && week <= 52 && (!extraction.weekNumber || extraction.confidence.weekNumber < pattern.confidence)) {
                extraction.weekNumber = week;
                extraction.confidence.weekNumber = pattern.confidence;
                extraction.evidence.push(`Week ${week} from pattern: ${pattern.description}`);
            }
        }

        if (fields.program && match[fields.program]) {
            const program = parseInt(match[fields.program]);
            if (program > 0 && (!extraction.programDuration || extraction.confidence.programDuration < pattern.confidence)) {
                extraction.programDuration = program;
                extraction.confidence.programDuration = pattern.confidence;
                extraction.evidence.push(`${program}-week program from pattern: ${pattern.description}`);
            }
        }

        if (fields.sessionType) {
            extraction.sessionType = fields.sessionType;
            extraction.confidence.sessionType = pattern.confidence;
            extraction.evidence.push(`Session type "${fields.sessionType}" from pattern`);
        }
    }

    /**
     * Standardize extracted names
     */
    async standardizeNames(extraction) {
        // Standardize coach name
        if (extraction.coach) {
            const standardized = await this.nameStandardizer.standardizeName(extraction.coach, 'coach');
            if (standardized.confidence > 0) {
                extraction.coach = standardized.standardized;
                if (standardized.method !== 'no_match') {
                    extraction.evidence.push(`Coach name standardized: ${standardized.method}`);
                }
            }
        }

        // Standardize student name
        if (extraction.student) {
            const standardized = await this.nameStandardizer.standardizeName(extraction.student, 'student');
            if (standardized.confidence > 0) {
                extraction.student = standardized.standardized;
                if (standardized.method !== 'no_match') {
                    extraction.evidence.push(`Student name standardized: ${standardized.method}`);
                }
            }
        }
    }

    /**
     * Determine session type
     */
    determineSessionType(extraction) {
        if (extraction.sessionType) return; // Already determined

        // Rules for session type
        if (extraction.coach && extraction.student) {
            extraction.sessionType = 'Coaching';
            extraction.confidence.sessionType = 90;
            extraction.evidence.push('Session type: Coaching (coach + student present)');
        } else if (extraction.topic && extraction.topic.toLowerCase().includes('game plan')) {
            extraction.sessionType = 'Game Plan';
            extraction.confidence.sessionType = 95;
            extraction.evidence.push('Session type: Game Plan (from topic)');
        } else if (extraction.topic && extraction.topic.toLowerCase().includes('sat')) {
            extraction.sessionType = 'SAT Prep';
            extraction.confidence.sessionType = 95;
            extraction.evidence.push('Session type: SAT Prep (from topic)');
        } else if (!extraction.student || extraction.student === 'Unknown') {
            extraction.sessionType = 'Admin';
            extraction.confidence.sessionType = 70;
            extraction.evidence.push('Session type: Admin (no student identified)');
        } else {
            extraction.sessionType = 'Other';
            extraction.confidence.sessionType = 50;
            extraction.evidence.push('Session type: Other (default)');
        }
    }

    /**
     * Calculate overall confidence
     */
    calculateOverallConfidence(confidence) {
        const weights = {
            coach: 0.3,
            student: 0.3,
            weekNumber: 0.2,
            sessionType: 0.1,
            programDuration: 0.1
        };

        let totalWeight = 0;
        let weightedSum = 0;

        for (const [field, weight] of Object.entries(weights)) {
            if (confidence[field] > 0) {
                weightedSum += confidence[field] * weight;
                totalWeight += weight;
            }
        }

        return totalWeight > 0 ? Math.round(weightedSum / totalWeight) : 0;
    }

    /**
     * Get available metadata fields
     */
    getAvailableFields() {
        return this.zoomFields;
    }

    /**
     * Get topic patterns for testing
     */
    getTopicPatterns() {
        return this.topicPatterns;
    }
}

module.exports = { EnhancedMetadataExtractor };